;This is an example of the main configuration file when the mode is set to manual
[ General ]
;Mode can be either manual or automatic
;In manual mode, you define your own states and transitions using:
;   - Deterministic Finite Automata (DFAs)
;   - Nondeterministic Finite Automata (NFAs)
;   - Nondeterministic Finite Automata with ε-transitions (ε-NFAs)
;   - Pushdown Automata (PDAs)
;   - Turing machines (TMs)
;   - Stochastic Finite Automata (SFAs)
;All defined using the json format
;In automatic mode, you define states and transitions using a set of pseudo-instructions
;These will be automatically converted into a working cellular automaton
mode=manual
;Dimensions of the cellular automaton
;Default: 200x200
width=200
height=200
;Initial layout of the cellular automaton,
;Default: all cells will default to the first state if their value is not given.
;If their value is given but isn't in range of the amount of states, the value will clip.
;This way the layout may be left out or may be of another grid size.
layout="./input/official_examples/layout_example.csv"
;The relative coordinates (in order) of which a state will receive their input
;Default: (0, -1), (-1, -1), (-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1)
inputs=(0, 0), (0, -1), (0, -2), (-1, 0), (1 ,0), (0, 1), (0, 2)

[ States ]
;Number of states per cell
amount=3
;Names of the states, their colors (hex, common color names, random, epsilon) and the path to their automata
;If a state's color is epsilon the cell will evaluate it's inputs for the epsilon-state in the same tick as the cell went into the epsilon-state
;This allows a state effectively to transition to more than 2 states
state1=alive,   #ffffff,    ./input/enfa.json
state2=death,   black,      ./input/pda.json
state3=zombie,  random,     ./input/tm.json

[ Transitions ]
;Transition from state to state when the cell accepts or rejects
;Format is accept, reject
;Default: transition to itself
alive=zombie,   death
death=alive,    zombie
zombie=zombie,  death

